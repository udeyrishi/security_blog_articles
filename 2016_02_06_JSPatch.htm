<h1>iOS Remote Patching project JSPatch introduces severe security loopholes</h1>

<p>iOS is considered one of the more secure mobile platforms because of Apple’s verification process when publishing and updating apps. <a href="https://github.com/bang590/JSPatch" target="_blank">JSPatch</a> is an open source project that "bridge[s] Objective-C and Javascript using the Objective-C runtime," through which "you can call any Objective-C class and method in JavaScript." An <a href="https://www.fireeye.com/blog/threat-research/2016/01/hot_or_not_the_bene.html" target="_blank">analysis</a> by the security firm FireEye discusses how this capability, which was built with the intentions of bypassing the Apple review mechanism for urgent hotfixes, can be misused by a malicious developer for causing damage.</p>

<p>JSPatch allows developers to download JavaScript files at runtime, and this JS code can then interface with iOS Objective-C APIs. This is excellent for "good-intentioned" developers, because they can update their apps whenever needed, bypassing Apple's lengthy verification process for updates. But as the FireEye report shows, one can do a lot more--start using frameworks which weren't originally used (or were verified for by Apple), access private frameworks used only by Apple's first party apps (because at runtime, iOS makes no distinction between first-party and other apps when accessing these frameworks), and even access private APIs in frameworks. This can have serious consequences, and the article describes some of these cases.</p>

<p>FireEye states that downloading code at runtime is against iOS developer regulations, but the JSPatch community argues, that because JSPatch is built using Apple's WebKitFramework and JavascriptCore, it is in compliance with these regulations. Moreover, the use of malicious JavaScript is against these policies as well, but because the original use-case (according to the GitHub page) is sending hotfixes, "JSPatch is walking a fine line."</p>

<p>I don't have a very detailed understanding of the Objective-C runtime on iOS (would love some input here), but it looks like iOS framework permissions work quite differently from its competitor platform, Android. As I understand, permissions in Android are verified at runtime through the app manifest. So, accessing a feature exposed by a particular permission will crash the app, if it was not declared in the app's manifest—something I've personally experienced. Since, the malicious iOS app can access all the frameworks and APIs at runtime through JSPatch, it seems that iOS doesn't verify these framework/API requests in an analogous fashion. I wonder if this is a reason for this loophole.</p>